#graphviz
#dot  <filename> -Tpng -o <filename.png>

digraph G 
{
    fontname = "Courier New"
    fontsize = 8

    node 
	[
            fontname = "Courier New"
            fontsize = 8
            shape = "record"
    ]
	
    #top->bottom
    rankdir=BT;

    edge 
	[
            fontname = "Courier New"
            fontsize = 8
    ]

    ##########################################################################################################################################
    #association 关联关系
    #概念：表示类与类之间的联接,它使一个类知道另一个类的属性和方法，这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，在程序中被关联类B以类属性的形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量
    
    #表示方法：实线箭头，类A指向类B

    #example:
    #
    #class Employee
    #{
    #public:
    #    void startWorking();
    #};
    #
	#class Company
	#{
	#private:
	#	 Employee employee_;
	#public:
    #    void setEmployee(Employee employee)
    #    {
    #        employee_ = employee;
    #    }
	#	 //公司运作    
	#	 void run()
	#	 {
	#	     employee.startWorking();
	#	 }
	#};
    
    Employee 
	[
            label = "{Employee|+ startWorking : void\l}"
    ]

    Company 
	[
            label = "{Company|+ setEmployee(Employee e) : void\l+ run() : void\l}"
    ]

	Company -> Employee [label=association arrowhead=normal]
    ##########################################################################################################################################

    ##########################################################################################################################################
    #dependency  依赖关系
    #概念：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖，在程序中一般表现为类A中的方法需要类B的实例作为其参数或者变量，而类A本身并不需要引用类B的实例作为其成员变量。
    
    ##表示方法：虚线箭头，类A指向类B

    #example:
    #
    #class Boat
    #{
    #public:
    #    void oarage();
    #};   
    # 
    #class Person
    #{
    #public:
    #    //划船
    #    void oarage(Boat boat)
    #    {
    #        boat.oarage();
    #    }
    #};

    Person
	[
            label = "{Person|+ oarage(Boat boat) : void\l}"
    ]

    Boat 
	[
            label = "{Boat|+ oarage() : void\l}"
    ]

	Person -> Boat [label=dependency rowhead=normal style=dashed]
    ##########################################################################################################################################
    
    ##########################################################################################################################################
    #aggregation 聚合关系
    #概念：聚合关联关系的一种特例，是强的关联关系。聚合是整体和个体之间的关系，即has-a的关系，整体与个体可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。程序中聚合和关联关系是一致的，只能从语义级别来区分；

    #表示方法：尾部为空心菱形的实线箭头（也可以没箭头），类A指向类B

    #example:
    #
    #class Student
    #{
    #    string name;
    #};   
    # 
    #class Teacher
    #{
    #	std::vector<Student> students_;
    #};
    
	Student
	[
            label = "{Student|+ name : string\l}"
    ]

    Teacher 
	[
            label = "{Teacher|+ students : vector\<Student\>\l}"
    ]

	Teacher -> Student[label=aggregation dir=both arrowhead=open arrowtail=ediamond]
    ##########################################################################################################################################

    ##########################################################################################################################################
    #composition 组合关系
    #概念：组合也是关联关系的一种特例。组合是一种整体与部分的关系，即contains-a的关系，比聚合更强。部分与整体的生命周期一致，整体的生命周期结束也就意味着部分的生命周期结束，组合关系不能共享。程序中组合和关联关系是一致的，只能从语义级别来区分。

    #表示方法：尾部为实心菱形的实现箭头（也可以没箭头），类A指向类B
    
    #example:
    #
    #class Head {};
    #
    #class LeftLeg {}; 
    #
    #class RightLeg {}; 
    #
    #class Human
    #{
    #	Head head_;
    #	LeftHand leftHand_;
    #	RightHand rightHand_;
    #};

	Head [label = "{Head|}"]
	LeftLeg [label = "{LeftLeg|}"]
	RightLeg [label = "{RightLeg|}"]
    
	Human
	[
        label = "{Human|+ head : Head\l+ leftHand : LeftHand\l+ rightHand : RightHand}"
    ]

	Human -> Head [label=composition dir=both arrowhead=open arrowtail=diamond]
	Human -> LeftLeg [label=composition dir=both arrowhead=open arrowtail=diamond]
	Human -> RightLeg [label=composition dir=both arrowhead=open arrowtail=diamond]
    ##########################################################################################################################################

    ##########################################################################################################################################
    #generalization  泛化
    #概念：泛化是一种一般与特殊、一般与具体之间关系的描述，具体描述建立在一般描述的基础之上，并对其进行了扩展。在程序中是通过继承类实现的。比如狗是对动物的具体描述，在面向对象设计的时候一般把狗设计为动物的子类。

    #表示方法：空心三角形箭头的实线，子类指向父类

    #example:
    #
    #class Animal
    #{
	#public:
    #    string name;
    #    int age;
    #    void die();
    #};
    #
    #class Dog : public Animal
    #{
    #public:
    #    void bark();
    #}; 
    #

	Animal 
	[
	    label = "{Animal|+ name : string\l+ age : int\l|+ die() : void\l}"
	]

	Dog 
	[
	    label = "{Dog||+ bark() : void\l}"
	]

    Dog -> Animal [label=generalization arrowhead=empty]
    ##########################################################################################################################################

    ##########################################################################################################################################
    #realization 实现
    #概念：实现是一种类与接口的关系，表示类是接口所有特征和行为的实现，在程序中一般通过类实现接口来描述

    #表示方法：空心三角形箭头的虚线，实现类指向接口

    #example:
    #
    #class Speakable
    #{
	#public:
    #    virtual string speak() = 0;
    #};
    #
    #class Cat : public Speakable
    #{
	#public:
    #    string speak();
    #};

	Speakable
	[
	    label = "{Speakable|+ speak(): string\l}"
	]

	Cat 
	[
	    label = "{cat||+ speak() : string\l}"
	]

    Cat -> Speakable[label=realization arrowhead=empty style=dashed]
    ##########################################################################################################################################

}
